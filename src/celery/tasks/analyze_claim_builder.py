import asyncio
from datetime import datetime, timezone
from fastapi import HTTPException
import httpx
from loguru import logger
from src.environment import environment
from src.modules.product.claim_builder.schema import (
    IFU,
    Draft,
    IFUSource,
    Compliance,
    ComplianceStatus,
    MissingElement,
    MissingElementLevel,
    RiskIndicator,
    RiskIndicatorSeverity,
    PhraseConflict,
)
from src.modules.product.claim_builder.model import (
    ClaimBuilder,
    AnalyzeClaimBuilderProgress,
)
from src.modules.product.product_profile.storage import (
    get_product_profile_documents,
)
from src.celery.worker import celery
from src.celery.tasks.base import BaseTask
from src.infrastructure.redis import redis_client


@celery.task(
    base=BaseTask,
    name="src.celery.tasks.analyze_claim_builder",
)
def analyze_claim_builder_task(
    product_id: str,
) -> None:
    logger.info(f"Parsing product profile for product: {product_id}")
    try:
        if environment.use_separated_ai_service:
            logger.info(
                f"Using separated AI service for product profile analysis: {product_id}"
            )
            httpx.post(
                f"{environment.ai_service_url}/analyze-claim-builder?product_id={product_id}"
            )
        else:
            logger.info(
                f"Using internal AI service for product profile analysis: {product_id}"
            )
            loop = asyncio.get_event_loop()
            loop.run_until_complete(
                analyze_claim_builder_task_async(
                    product_id,
                )
            )
    except HTTPException as e:
        logger.error(f"Failed to analyze product profile: {e.detail}")
        raise e
    except Exception as e:
        logger.error(f"An unexpected error occurred: {str(e)}")
        raise HTTPException(500, "Internal Server Error") from e


class AnalyzeProgress:
    initialized = False
    progress: AnalyzeClaimBuilderProgress

    async def initialize(self, product_id: str, total_files: int):
        existing_progress = await AnalyzeClaimBuilderProgress.find_one(
            AnalyzeClaimBuilderProgress.product_id == product_id,
        )
        if existing_progress:
            self.progress = existing_progress
            self.progress.product_id = product_id
            self.progress.total_files = total_files
            self.progress.processed_files = 0
            self.progress.updated_at = datetime.now(timezone.utc)
        else:
            self.progress = AnalyzeClaimBuilderProgress(
                product_id=product_id,
                total_files=total_files,
                processed_files=0,
                updated_at=datetime.now(timezone.utc),
            )
        await self.progress.save()
        self.initialized = True
        logger.info(
            f"Initialized progress for product {product_id} with total files {total_files}"
        )

    async def increase(self, count: int = 1):
        if not self.initialized:
            raise HTTPException(
                status_code=500,
                detail="Progress not initialized. Call initialize() first.",
            )
        self.progress.processed_files += count
        self.progress.updated_at = datetime.now(timezone.utc)
        await self.progress.save()


async def analyze_claim_builder_task_async(
    product_id: str,
) -> None:
    lock = redis_client.lock(
        f"NOIS2:Background:AnalyzeClaimBuilder:AnalyzeLock:{product_id}",
        timeout=100,
    )
    lock_acquired = await lock.acquire(blocking=False)
    if not lock_acquired:
        logger.info(
            f"Task is already running for product {product_id}. Skipping analysis."
        )
        return

    product_profile_documents = await get_product_profile_documents(product_id)
    number_of_documents = len(product_profile_documents)

    progress = AnalyzeProgress()
    await progress.initialize(product_id, number_of_documents)

    for i, document in enumerate(product_profile_documents):
        await progress.increase()
        logger.info(
            f"Analyzed product profile document {i + 1}/{number_of_documents} for product: {product_id}"
        )
    logger.info("Starting AI generation of product profile...")
    logger.info(f"Finished analyzing product profile for product: {product_id}")
    await ClaimBuilder.find(
        ClaimBuilder.product_id == product_id,
    ).delete_many()
    claim_builder = ClaimBuilder(
        product_id=product_id,
        draft=[
            Draft(
                version=0,
                updated_at=datetime.now(timezone.utc),
                updated_by="AI",
                content="This is a draft claim generated by AI for product_id: {}".format(
                    product_id
                ),
                submitted=False,
                accepted=False,
            )
        ],
        key_phrases=[
            "High quality material",
            "Complies with EU regulations",
        ],
        ifu=[
            IFU(
                phrase="The ",
            ),
            IFU(
                phrase="Product",
                sources=[
                    IFUSource(
                        source="Source 1",
                        reason="Reason 1",
                        category="Source Category 1",
                    ),
                    IFUSource(
                        source="Source 2",
                        reason="Reason 2",
                        category="Source Category 2",
                    ),
                    IFUSource(
                        source="Source 3",
                        reason="Reason 3",
                        category="Source Category 3",
                    ),
                ],
            ),
            IFU(
                phrase=" is indicated use in ",
            ),
            IFU(
                phrase="therapeutic area",
                sources=[
                    IFUSource(
                        source="Source 1",
                        reason="Reason 1",
                        category="Source Category 1",
                    ),
                    IFUSource(
                        source="Source 2",
                        reason="Reason 2",
                        category="Source Category 2",
                    ),
                ],
            ),
            IFU(
                phrase=" for the treatment of ",
            ),
            IFU(
                phrase="specific conditions",
                sources=[
                    IFUSource(
                        source="Source 1",
                        reason="Reason 1",
                        category="Source Category 1",
                    ),
                    IFUSource(
                        source="Source 2",
                        reason="Reason 2",
                        category="Source Category 2",
                    ),
                    IFUSource(
                        source="Source 3",
                        reason="Reason 3",
                        category="Source Category 3",
                    ),
                ],
            ),
            IFU(
                phrase=" patients who ",
            ),
            IFU(
                phrase="patient population",
                sources=[
                    IFUSource(
                        source="Source 1",
                        reason="Reason 1",
                        category="Source Category 1",
                    ),
                    IFUSource(
                        source="Source 2",
                        reason="Reason 2",
                        category="Source Category 2",
                    ),
                ],
            ),
        ],
        compliance=[
            Compliance(
                content="This is OK compliance",
                status=ComplianceStatus.OK,
            ),
            Compliance(
                content="This is WARNING compliance",
                status=ComplianceStatus.WARNING,
            ),
            Compliance(
                content="This is CRITICAL compliance",
                status=ComplianceStatus.CRITICAL,
            ),
        ],
        missing_elements=[
            MissingElement(
                id=0,
                description="This is minor missing element",
                suggested_fix="Add safety instructions to the product documentation.",
                level=MissingElementLevel.MINOR,
            ),
            MissingElement(
                id=1,
                description="This is major missing element",
                suggested_fix="Include detailed usage instructions in the product manual.",
                level=MissingElementLevel.MAJOR,
            ),
            MissingElement(
                id=2,
                description="This is critical missing element",
                suggested_fix="Ensure the product complies with all safety regulations.",
                level=MissingElementLevel.CRITICAL,
            ),
        ],
        risk_indicators=[
            RiskIndicator(
                description="This is a low risk indicator",
                severity=RiskIndicatorSeverity.LOW,
            ),
            RiskIndicator(
                description="This is a medium risk indicator",
                severity=RiskIndicatorSeverity.MEDIUM,
            ),
            RiskIndicator(
                description="This is a high risk indicator",
                severity=RiskIndicatorSeverity.HIGH,
            ),
        ],
        phrase_conflicts=[
            PhraseConflict(
                id=0,
                statement="This is a phrase conflict statement",
                conflicting_regulation="This is the conflicting regulation",
                suggested_fix="This is the suggested fix for the phrase conflict",
            ),
            PhraseConflict(
                id=1,
                statement="This is another phrase conflict statement",
                conflicting_regulation="This is another conflicting regulation",
                suggested_fix="This is another suggested fix for the phrase conflict",
            ),
            PhraseConflict(
                id=2,
                statement="This is yet another phrase conflict statement",
                conflicting_regulation="This is yet another conflicting regulation",
                suggested_fix="This is yet another suggested fix for the phrase conflict",
            ),
        ],
        user_acceptance=False,
    )
    await ClaimBuilder.find(
        ClaimBuilder.product_id == product_id,
    ).delete_many()
    await claim_builder.save()
    logger.info(
        f"Analyzed product profile for product: {product_id}, including {number_of_documents} documents."
    )
    await lock.release()
    logger.info(f"Released lock for product {product_id}")
